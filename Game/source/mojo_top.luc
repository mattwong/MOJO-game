module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    input start,
    input add1,
    input sub1,
    input mul1,
    input clr1,
    input add2,
    input sub2,
    input mul2,
    input clr2,
    
    output p1display[14],
    output p2display[14],
    output goaldisplay[14],
    output lane1a[5],
    output lane2a[5],
    output lane1b[5],
    output lane2b[5],
    output lane3a[5],
    output lane3b[5]

  ) {
  
  sig rst;                  // reset signal
  
  alu alu1;
  alu alu2;
  
  dual_seven_seg seven_seg_p;
  dual_seven_seg seven_seg11;
  dual_seven_seg seven_seg22;
  
  statemachine ctl1;
  statemachine ctl2;
  regfiles reg;
  
  random_problem rng1;
  random_problem rng2;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector edgeAdd1 (#RISE(1), #FALL(0));
    button_conditioner condAdd1;
    edge_detector edgeSub1 (#RISE(1), #FALL(0));
    button_conditioner condSub1;
    edge_detector edgeMul1 (#RISE(1), #FALL(0));
    button_conditioner condMul1;
    edge_detector edgeClr1 (#RISE(1), #FALL(0));
    button_conditioner condClr1;
    
    edge_detector edgeAdd2 (#RISE(1), #FALL(0));
    button_conditioner condAdd2;
    edge_detector edgeSub2 (#RISE(1), #FALL(0));
    button_conditioner condSub2;
    edge_detector edgeMul2 (#RISE(1), #FALL(0));
    button_conditioner condMul2;
    edge_detector edgeClr2 (#RISE(1), #FALL(0));
    button_conditioner condClr2;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    rng1.clk = clk;
    rng1.rst = rst;
    rng1.seed = 333;
    rng2.seed = 987;
    rng2.clk = clk;
    rng2.rst = rst;
    rng2.next = ctl2.rngout;
    rng1.next = ctl1.rngout;
    
    condAdd1.in = add1;
    edgeAdd1.in = condAdd1.out;
    
    condSub1.in = sub1;
    edgeSub1.in = condSub1.out;
    
    condMul1.in = mul1;
    edgeMul1.in = condMul1.out;
    
    condClr1.in = clr1;
    edgeClr1.in = condClr1.out;
    
    condAdd2.in = add2;
    edgeAdd2.in = condAdd2.out;
    
    condSub2.in = sub2;
    edgeSub2.in = condSub2.out;
    
    condMul2.in = mul2;
    edgeMul2.in = condMul2.out;
    
    condClr2.in = clr2;
    edgeClr2.in = condClr2.out;
    
    ctl1.clk = clk;
    ctl1.rst = rst;
    ctl1.startbt = start;
    ctl1.addbt = edgeAdd1.out;
    ctl1.subbt = edgeSub1.out;
    ctl1.mulbt = edgeMul1.out;
    ctl1.clrbt = edgeClr1.out;
    ctl1.fromreg = reg.fsmport1;
    ctl1.rngin = rng1.num;
    
    ctl2.clk = clk;
    ctl2.rst = rst;
    ctl2.startbt = start;
    ctl2.addbt = edgeAdd2.out;
    ctl2.subbt = edgeSub2.out;
    ctl2.mulbt = edgeMul2.out;
    ctl2.clrbt = edgeClr2.out;
    ctl2.fromreg = reg.fsmport2;
    ctl2.rngin = rng2.num;
    
    alu1.alufn = ctl1.alufn;
    alu1.a = reg.a1;
    case(ctl1.bsel){
      b000: alu1.b = 0;
      b001: alu1.b = 1;
      b010: alu1.b = 2;
      b011: alu1.b = 3;
      b111: alu1.b = reg.goalreg;
      default: alu1.b = 0; 
    }
    
    alu2.alufn = ctl2.alufn;
    alu2.a = reg.a2;
    case(ctl2.bsel){
      b000: alu2.b = 0;
      b001: alu2.b = 1;
      b010: alu2.b = 2;
      b011: alu2.b = 3;
      b111: alu2.b = reg.goalreg;
      default: alu2.b = 0; 
    }
    
    reg.clk = clk;
    reg.rst = rst;
    reg.wa1 = ctl1.wa;
    reg.asel1 = ctl1.asel;
    reg.we1 = ctl1.we;
    reg.ra1 = ctl1.ra;
    reg.fsm1 = ctl1.toreg;
    reg.alu1 = alu1.s;
    reg.wa2 = ctl2.wa;
    reg.asel2 = ctl2.asel;
    reg.we2 = ctl2.we;
    reg.ra2 = ctl2.ra;
    reg.alu2 = alu2.s;
    reg.fsm2 = ctl2.toreg;
    reg.reset = ctl1.reset;
    reg.reset = ctl2.reset;
    
    seven_seg11.char = reg.p1num;
    seven_seg22.char = reg.p2num;
    seven_seg_p.char = reg.goalreg;
    
    goaldisplay[6:0] = ~seven_seg_p.segs1;
    goaldisplay[13:7] = ~seven_seg_p.segs2;
    
    p1display[13:7] = seven_seg11.segs2;  
    p1display[6:0] = seven_seg11.segs1;  
    
    p2display[13:7] = seven_seg22.segs1;
    p2display[6:0] = seven_seg22.segs2;
    
    lane1a[4:0] = reg.lane1p1[4:0];
    lane2a[4:0] = reg.lane2p1[4:0];
    lane3a[4:0] = reg.lane3p1[4:0];
    
    lane1b = reg.lane1p2[4:0];
    lane2b = reg.lane2p2[4:0];
    lane3b = reg.lane3p2[4:0];
  }
}
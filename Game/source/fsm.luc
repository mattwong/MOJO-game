module statemachine (
    input clk,
    input rst,
    input addbt,    //add
    input subbt,    //sub
    input mulbt,    //mul
    input startbt,  //start
    input clrbt,    //clear
    input fromreg[16],
    input rngin[16],
    input inend,
    output ra[3],
    output alufn[6],
    output bsel[3],
    output asel[3],
    output we,         //write enable
    output wa[3],      //write address
    output toreg[16],  //write data to registers
    output reset,       //reset signal for registers
    output rngout,
    output outend
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {
      IDLE, SELPROB, PROB, ADD, SUB, MUL, CLR, CMP, CHECKRES, 
      CHECKLN, MOVELN1, MOVELN2, MOVELN3, CHGLN, END};
    }
  }
  
  
  always {
    
    alufn = 000000;
    ra = 000;
    bsel = 000;
    asel = 000;
    we = 0;
    wa = 0;
    toreg = 0;
    reset = 0;
    rngout = 0;
    outend = 0;
    
    case(state.q){
      state.IDLE:
        reset = 1;
        if (startbt == 1)
          state.d = state.SELPROB;
          
      state.SELPROB:
        we = 1;
        wa = b001; 
        rngout = 1;
        toreg = rngin;
        state.d = state.PROB;
        
      state.PROB:  
        if (inend == 1)
          state.d = state.END;
        if (addbt == 1)
          state.d = state.ADD;
        if (subbt == 1)
          state.d = state.SUB;  
        if (mulbt == 1)
          state.d = state.MUL;
        if (clrbt == 1)
          state.d = state.CLR;
          
      state.ADD:
        alufn = b000000;
        asel = b000;
        bsel = b010;  
        we = 1;
        wa = 000;
        state.d = state.CMP;    
        
      state.SUB:
        alufn = b000001;
        asel = b000;
        bsel = b001;  
        we = 1;
        wa = 000;
        state.d = state.CMP;   
        
      state.MUL:
        alufn = b000010;
        asel = 000;
        bsel = b011;  
        we = 1;
        wa = 000;
        state.d = state.CMP;   
        
      state.CLR:
        alufn = b000010;
        asel = 000;
        bsel = 000;  
        we = 1;
        wa = 000;
        state.d = state.CMP;   
        
      state.CMP:
        alufn = b110011;  
        asel = b000;
        bsel = b111;
        we = 1;
        wa = b101;
        state.d = state.CHECKRES;
        
      state.CHECKRES:
        ra = b101;
        if (fromreg == 1)
          state.d = state.CHECKLN;
        else
          state.d = state.PROB;  
          
      state.CHECKLN:
        ra = b110;
        if (fromreg == b00)
          state.d = state.MOVELN1;
        if (fromreg == b01)
          state.d = state.MOVELN2;
        if (fromreg == b10)
          state.d = state.MOVELN3;              
        
      state.MOVELN1:
        alufn = b100000;
        bsel = b001;
        we = 1;
        wa = b010;
        asel = b010;
        ra = b010;
        if (fromreg == b1000)
          state.d = state.CHGLN;
        else
          state.d = state.SELPROB;
          
      state.MOVELN2:
        alufn = b100000;
        bsel = b001;
        we = 1;
        wa = b011;
        asel = b011;
        ra = b011;
        if (fromreg == b1000)
          state.d = state.CHGLN;
        else
          state.d = state.SELPROB;  
          
      state.MOVELN3:
        alufn = b100000;
        bsel = b001;
        we = 1;
        wa = b100;
        asel = b100;
        ra = b100;
        if (fromreg == b1000)
          state.d = state.END;
        else
          state.d = state.SELPROB;  
          
      state.CHGLN:
        alufn = b000000;
        bsel = b001;
        we = 1;
        wa = b110;
        asel = b110;
        state.d = state.SELPROB;
        
      state.END:
        outend = 1;
        if (startbt == 1){
          state.d = state.IDLE;
        }  
              
    }
  }
}

/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input start,
    input add1,
    input sub1,
    input mul1,
    input clr1,
    input add2,
    input sub2,
    input mul2,
    input clr2,
    output reg [6:0] p1display,
    output reg [6:0] p2display
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu1_s;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_n;
  wire [1-1:0] M_alu1_v;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [6-1:0] M_alu1_alufn;
  alu_1 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn(M_alu1_alufn),
    .s(M_alu1_s),
    .z(M_alu1_z),
    .n(M_alu1_n),
    .v(M_alu1_v)
  );
  
  wire [16-1:0] M_alu2_s;
  wire [1-1:0] M_alu2_z;
  wire [1-1:0] M_alu2_n;
  wire [1-1:0] M_alu2_v;
  reg [16-1:0] M_alu2_a;
  reg [16-1:0] M_alu2_b;
  reg [6-1:0] M_alu2_alufn;
  alu_1 alu2 (
    .a(M_alu2_a),
    .b(M_alu2_b),
    .alufn(M_alu2_alufn),
    .s(M_alu2_s),
    .z(M_alu2_z),
    .n(M_alu2_n),
    .v(M_alu2_v)
  );
  
  wire [7-1:0] M_seven_seg11_segs;
  reg [4-1:0] M_seven_seg11_char;
  seven_seg_3 seven_seg11 (
    .char(M_seven_seg11_char),
    .segs(M_seven_seg11_segs)
  );
  
  wire [7-1:0] M_seven_seg2_segs;
  reg [4-1:0] M_seven_seg2_char;
  seven_seg_3 seven_seg2 (
    .char(M_seven_seg2_char),
    .segs(M_seven_seg2_segs)
  );
  
  wire [3-1:0] M_ctl1_ra;
  wire [6-1:0] M_ctl1_alufn;
  wire [3-1:0] M_ctl1_bsel;
  wire [3-1:0] M_ctl1_asel;
  wire [1-1:0] M_ctl1_we;
  wire [3-1:0] M_ctl1_wa;
  wire [16-1:0] M_ctl1_toreg;
  reg [1-1:0] M_ctl1_clk;
  reg [1-1:0] M_ctl1_rst;
  reg [1-1:0] M_ctl1_addbt;
  reg [1-1:0] M_ctl1_subbt;
  reg [1-1:0] M_ctl1_mulbt;
  reg [1-1:0] M_ctl1_startbt;
  reg [1-1:0] M_ctl1_clrbt;
  reg [16-1:0] M_ctl1_fromreg;
  statemachine_5 ctl1 (
    .clk(M_ctl1_clk),
    .rst(M_ctl1_rst),
    .addbt(M_ctl1_addbt),
    .subbt(M_ctl1_subbt),
    .mulbt(M_ctl1_mulbt),
    .startbt(M_ctl1_startbt),
    .clrbt(M_ctl1_clrbt),
    .fromreg(M_ctl1_fromreg),
    .ra(M_ctl1_ra),
    .alufn(M_ctl1_alufn),
    .bsel(M_ctl1_bsel),
    .asel(M_ctl1_asel),
    .we(M_ctl1_we),
    .wa(M_ctl1_wa),
    .toreg(M_ctl1_toreg)
  );
  
  wire [3-1:0] M_ctl2_ra;
  wire [6-1:0] M_ctl2_alufn;
  wire [3-1:0] M_ctl2_bsel;
  wire [3-1:0] M_ctl2_asel;
  wire [1-1:0] M_ctl2_we;
  wire [3-1:0] M_ctl2_wa;
  wire [16-1:0] M_ctl2_toreg;
  reg [1-1:0] M_ctl2_clk;
  reg [1-1:0] M_ctl2_rst;
  reg [1-1:0] M_ctl2_addbt;
  reg [1-1:0] M_ctl2_subbt;
  reg [1-1:0] M_ctl2_mulbt;
  reg [1-1:0] M_ctl2_startbt;
  reg [1-1:0] M_ctl2_clrbt;
  reg [16-1:0] M_ctl2_fromreg;
  statemachine_5 ctl2 (
    .clk(M_ctl2_clk),
    .rst(M_ctl2_rst),
    .addbt(M_ctl2_addbt),
    .subbt(M_ctl2_subbt),
    .mulbt(M_ctl2_mulbt),
    .startbt(M_ctl2_startbt),
    .clrbt(M_ctl2_clrbt),
    .fromreg(M_ctl2_fromreg),
    .ra(M_ctl2_ra),
    .alufn(M_ctl2_alufn),
    .bsel(M_ctl2_bsel),
    .asel(M_ctl2_asel),
    .we(M_ctl2_we),
    .wa(M_ctl2_wa),
    .toreg(M_ctl2_toreg)
  );
  
  wire [16-1:0] M_reg_a1;
  wire [16-1:0] M_reg_a2;
  wire [16-1:0] M_reg_fsmport1;
  wire [16-1:0] M_reg_fsmport2;
  wire [16-1:0] M_reg_tob1;
  wire [16-1:0] M_reg_tob2;
  wire [16-1:0] M_reg_goalreg;
  wire [16-1:0] M_reg_lane1p1;
  wire [16-1:0] M_reg_lane2p1;
  wire [16-1:0] M_reg_lane3p1;
  wire [16-1:0] M_reg_lane1p2;
  wire [16-1:0] M_reg_lane2p2;
  wire [16-1:0] M_reg_lane3p2;
  wire [16-1:0] M_reg_p1num;
  wire [16-1:0] M_reg_p2num;
  reg [1-1:0] M_reg_clk;
  reg [1-1:0] M_reg_rst;
  reg [3-1:0] M_reg_asel1;
  reg [3-1:0] M_reg_asel2;
  reg [3-1:0] M_reg_wa1;
  reg [3-1:0] M_reg_wa2;
  reg [1-1:0] M_reg_we1;
  reg [1-1:0] M_reg_we2;
  reg [3-1:0] M_reg_ra1;
  reg [3-1:0] M_reg_ra2;
  reg [16-1:0] M_reg_fsm1;
  reg [16-1:0] M_reg_alu1;
  reg [16-1:0] M_reg_alu2;
  regfiles_7 L_reg (
    .clk(M_reg_clk),
    .rst(M_reg_rst),
    .asel1(M_reg_asel1),
    .asel2(M_reg_asel2),
    .wa1(M_reg_wa1),
    .wa2(M_reg_wa2),
    .we1(M_reg_we1),
    .we2(M_reg_we2),
    .ra1(M_reg_ra1),
    .ra2(M_reg_ra2),
    .fsm1(M_reg_fsm1),
    .alu1(M_reg_alu1),
    .alu2(M_reg_alu2),
    .a1(M_reg_a1),
    .a2(M_reg_a2),
    .fsmport1(M_reg_fsmport1),
    .fsmport2(M_reg_fsmport2),
    .tob1(M_reg_tob1),
    .tob2(M_reg_tob2),
    .goalreg(M_reg_goalreg),
    .lane1p1(M_reg_lane1p1),
    .lane2p1(M_reg_lane2p1),
    .lane3p1(M_reg_lane3p1),
    .lane1p2(M_reg_lane1p2),
    .lane2p2(M_reg_lane2p2),
    .lane3p2(M_reg_lane3p2),
    .p1num(M_reg_p1num),
    .p2num(M_reg_p2num)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_8 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edgeAdd1_out;
  reg [1-1:0] M_edgeAdd1_in;
  edge_detector_9 edgeAdd1 (
    .clk(clk),
    .in(M_edgeAdd1_in),
    .out(M_edgeAdd1_out)
  );
  wire [1-1:0] M_condAdd1_out;
  reg [1-1:0] M_condAdd1_in;
  button_conditioner_10 condAdd1 (
    .clk(clk),
    .in(M_condAdd1_in),
    .out(M_condAdd1_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_condAdd1_in = add1;
    M_edgeAdd1_in = M_condAdd1_out;
    M_ctl1_clk = clk;
    M_ctl1_rst = rst;
    M_ctl1_startbt = start;
    M_ctl1_addbt = M_edgeAdd1_out;
    M_ctl1_subbt = sub1;
    M_ctl1_mulbt = mul1;
    M_ctl1_clrbt = clr1;
    M_ctl1_fromreg = M_reg_fsmport1;
    M_ctl2_clk = clk;
    M_ctl2_rst = rst;
    M_ctl2_startbt = start;
    M_ctl2_addbt = add2;
    M_ctl2_subbt = sub2;
    M_ctl2_mulbt = mul2;
    M_ctl2_clrbt = clr2;
    M_ctl2_fromreg = M_reg_fsmport2;
    M_alu1_alufn = M_ctl1_alufn;
    M_alu1_a = M_reg_a1;
    
    case (M_ctl1_bsel)
      3'h0: begin
        M_alu1_b = 1'h0;
      end
      3'h1: begin
        M_alu1_b = 1'h1;
      end
      3'h2: begin
        M_alu1_b = 2'h2;
      end
      3'h3: begin
        M_alu1_b = 2'h3;
      end
      3'h7: begin
        M_alu1_b = M_reg_goalreg;
      end
      default: begin
        M_alu1_b = 1'h0;
      end
    endcase
    M_alu2_alufn = M_ctl2_alufn;
    M_alu2_a = M_reg_a2;
    
    case (M_ctl2_bsel)
      3'h0: begin
        M_alu2_b = 1'h0;
      end
      3'h1: begin
        M_alu2_b = 1'h1;
      end
      3'h2: begin
        M_alu2_b = 2'h2;
      end
      3'h3: begin
        M_alu2_b = 2'h3;
      end
      3'h7: begin
        M_alu2_b = M_reg_goalreg;
      end
      default: begin
        M_alu2_b = 1'h0;
      end
    endcase
    M_reg_clk = clk;
    M_reg_rst = rst;
    M_reg_wa1 = M_ctl1_wa;
    M_reg_asel1 = M_ctl1_asel;
    M_reg_we1 = M_ctl1_we;
    M_reg_ra1 = M_ctl1_ra;
    M_reg_fsm1 = M_ctl1_toreg;
    M_reg_alu1 = M_alu1_s;
    M_reg_wa2 = M_ctl2_wa;
    M_reg_asel2 = M_ctl2_asel;
    M_reg_we2 = M_ctl2_we;
    M_reg_ra2 = M_ctl2_ra;
    M_reg_alu2 = M_alu2_s;
    M_seven_seg11_char = M_reg_goalreg[0+3-:4];
    M_seven_seg2_char = M_reg_p1num[0+3-:4];
    p1display = M_seven_seg11_segs;
    p2display = M_seven_seg2_segs;
    led[0+0-:1] = M_reg_tob1;
  end
endmodule

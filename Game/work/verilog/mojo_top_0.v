/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input start,
    input add1,
    input sub1,
    input mul1,
    input clr1,
    input add2,
    input sub2,
    input mul2,
    input clr2,
    output reg [13:0] p1display,
    output reg [13:0] p2display,
    output reg [13:0] goaldisplay,
    output reg [4:0] lane1a,
    output reg [4:0] lane2a,
    output reg [4:0] lane1b,
    output reg [4:0] lane2b,
    output reg [4:0] lane3a,
    output reg [4:0] lane3b
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu1_s;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_n;
  wire [1-1:0] M_alu1_v;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [6-1:0] M_alu1_alufn;
  alu_1 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn(M_alu1_alufn),
    .s(M_alu1_s),
    .z(M_alu1_z),
    .n(M_alu1_n),
    .v(M_alu1_v)
  );
  
  wire [16-1:0] M_alu2_s;
  wire [1-1:0] M_alu2_z;
  wire [1-1:0] M_alu2_n;
  wire [1-1:0] M_alu2_v;
  reg [16-1:0] M_alu2_a;
  reg [16-1:0] M_alu2_b;
  reg [6-1:0] M_alu2_alufn;
  alu_1 alu2 (
    .a(M_alu2_a),
    .b(M_alu2_b),
    .alufn(M_alu2_alufn),
    .s(M_alu2_s),
    .z(M_alu2_z),
    .n(M_alu2_n),
    .v(M_alu2_v)
  );
  
  wire [7-1:0] M_seven_seg_p_segs1;
  wire [7-1:0] M_seven_seg_p_segs2;
  reg [16-1:0] M_seven_seg_p_char;
  dual_seven_seg_3 seven_seg_p (
    .char(M_seven_seg_p_char),
    .segs1(M_seven_seg_p_segs1),
    .segs2(M_seven_seg_p_segs2)
  );
  
  wire [7-1:0] M_seven_seg11_segs1;
  wire [7-1:0] M_seven_seg11_segs2;
  reg [16-1:0] M_seven_seg11_char;
  dual_seven_seg_3 seven_seg11 (
    .char(M_seven_seg11_char),
    .segs1(M_seven_seg11_segs1),
    .segs2(M_seven_seg11_segs2)
  );
  
  wire [7-1:0] M_seven_seg22_segs1;
  wire [7-1:0] M_seven_seg22_segs2;
  reg [16-1:0] M_seven_seg22_char;
  dual_seven_seg_3 seven_seg22 (
    .char(M_seven_seg22_char),
    .segs1(M_seven_seg22_segs1),
    .segs2(M_seven_seg22_segs2)
  );
  
  wire [3-1:0] M_ctl1_ra;
  wire [6-1:0] M_ctl1_alufn;
  wire [3-1:0] M_ctl1_bsel;
  wire [3-1:0] M_ctl1_asel;
  wire [1-1:0] M_ctl1_we;
  wire [3-1:0] M_ctl1_wa;
  wire [16-1:0] M_ctl1_toreg;
  wire [1-1:0] M_ctl1_reset;
  wire [1-1:0] M_ctl1_rngout;
  reg [1-1:0] M_ctl1_clk;
  reg [1-1:0] M_ctl1_rst;
  reg [1-1:0] M_ctl1_addbt;
  reg [1-1:0] M_ctl1_subbt;
  reg [1-1:0] M_ctl1_mulbt;
  reg [1-1:0] M_ctl1_startbt;
  reg [1-1:0] M_ctl1_clrbt;
  reg [16-1:0] M_ctl1_fromreg;
  reg [16-1:0] M_ctl1_rngin;
  statemachine_6 ctl1 (
    .clk(M_ctl1_clk),
    .rst(M_ctl1_rst),
    .addbt(M_ctl1_addbt),
    .subbt(M_ctl1_subbt),
    .mulbt(M_ctl1_mulbt),
    .startbt(M_ctl1_startbt),
    .clrbt(M_ctl1_clrbt),
    .fromreg(M_ctl1_fromreg),
    .rngin(M_ctl1_rngin),
    .ra(M_ctl1_ra),
    .alufn(M_ctl1_alufn),
    .bsel(M_ctl1_bsel),
    .asel(M_ctl1_asel),
    .we(M_ctl1_we),
    .wa(M_ctl1_wa),
    .toreg(M_ctl1_toreg),
    .reset(M_ctl1_reset),
    .rngout(M_ctl1_rngout)
  );
  
  wire [3-1:0] M_ctl2_ra;
  wire [6-1:0] M_ctl2_alufn;
  wire [3-1:0] M_ctl2_bsel;
  wire [3-1:0] M_ctl2_asel;
  wire [1-1:0] M_ctl2_we;
  wire [3-1:0] M_ctl2_wa;
  wire [16-1:0] M_ctl2_toreg;
  wire [1-1:0] M_ctl2_reset;
  wire [1-1:0] M_ctl2_rngout;
  reg [1-1:0] M_ctl2_clk;
  reg [1-1:0] M_ctl2_rst;
  reg [1-1:0] M_ctl2_addbt;
  reg [1-1:0] M_ctl2_subbt;
  reg [1-1:0] M_ctl2_mulbt;
  reg [1-1:0] M_ctl2_startbt;
  reg [1-1:0] M_ctl2_clrbt;
  reg [16-1:0] M_ctl2_fromreg;
  reg [16-1:0] M_ctl2_rngin;
  statemachine_6 ctl2 (
    .clk(M_ctl2_clk),
    .rst(M_ctl2_rst),
    .addbt(M_ctl2_addbt),
    .subbt(M_ctl2_subbt),
    .mulbt(M_ctl2_mulbt),
    .startbt(M_ctl2_startbt),
    .clrbt(M_ctl2_clrbt),
    .fromreg(M_ctl2_fromreg),
    .rngin(M_ctl2_rngin),
    .ra(M_ctl2_ra),
    .alufn(M_ctl2_alufn),
    .bsel(M_ctl2_bsel),
    .asel(M_ctl2_asel),
    .we(M_ctl2_we),
    .wa(M_ctl2_wa),
    .toreg(M_ctl2_toreg),
    .reset(M_ctl2_reset),
    .rngout(M_ctl2_rngout)
  );
  
  wire [16-1:0] M_reg_a1;
  wire [16-1:0] M_reg_a2;
  wire [16-1:0] M_reg_fsmport1;
  wire [16-1:0] M_reg_fsmport2;
  wire [16-1:0] M_reg_tob1;
  wire [16-1:0] M_reg_tob2;
  wire [16-1:0] M_reg_goalreg;
  wire [16-1:0] M_reg_lane1p1;
  wire [16-1:0] M_reg_lane2p1;
  wire [16-1:0] M_reg_lane3p1;
  wire [16-1:0] M_reg_lane1p2;
  wire [16-1:0] M_reg_lane2p2;
  wire [16-1:0] M_reg_lane3p2;
  wire [16-1:0] M_reg_p1num;
  wire [16-1:0] M_reg_p2num;
  wire [16-1:0] M_reg_lanereg;
  reg [1-1:0] M_reg_clk;
  reg [1-1:0] M_reg_rst;
  reg [3-1:0] M_reg_asel1;
  reg [3-1:0] M_reg_asel2;
  reg [3-1:0] M_reg_wa1;
  reg [3-1:0] M_reg_wa2;
  reg [1-1:0] M_reg_we1;
  reg [1-1:0] M_reg_we2;
  reg [3-1:0] M_reg_ra1;
  reg [3-1:0] M_reg_ra2;
  reg [1-1:0] M_reg_reset;
  reg [16-1:0] M_reg_fsm1;
  reg [16-1:0] M_reg_fsm2;
  reg [16-1:0] M_reg_alu1;
  reg [16-1:0] M_reg_alu2;
  regfiles_8 L_reg (
    .clk(M_reg_clk),
    .rst(M_reg_rst),
    .asel1(M_reg_asel1),
    .asel2(M_reg_asel2),
    .wa1(M_reg_wa1),
    .wa2(M_reg_wa2),
    .we1(M_reg_we1),
    .we2(M_reg_we2),
    .ra1(M_reg_ra1),
    .ra2(M_reg_ra2),
    .reset(M_reg_reset),
    .fsm1(M_reg_fsm1),
    .fsm2(M_reg_fsm2),
    .alu1(M_reg_alu1),
    .alu2(M_reg_alu2),
    .a1(M_reg_a1),
    .a2(M_reg_a2),
    .fsmport1(M_reg_fsmport1),
    .fsmport2(M_reg_fsmport2),
    .tob1(M_reg_tob1),
    .tob2(M_reg_tob2),
    .goalreg(M_reg_goalreg),
    .lane1p1(M_reg_lane1p1),
    .lane2p1(M_reg_lane2p1),
    .lane3p1(M_reg_lane3p1),
    .lane1p2(M_reg_lane1p2),
    .lane2p2(M_reg_lane2p2),
    .lane3p2(M_reg_lane3p2),
    .p1num(M_reg_p1num),
    .p2num(M_reg_p2num),
    .lanereg(M_reg_lanereg)
  );
  
  wire [16-1:0] M_rng1_num;
  reg [1-1:0] M_rng1_clk;
  reg [1-1:0] M_rng1_rst;
  reg [1-1:0] M_rng1_next;
  reg [32-1:0] M_rng1_seed;
  random_problem_9 rng1 (
    .clk(M_rng1_clk),
    .rst(M_rng1_rst),
    .next(M_rng1_next),
    .seed(M_rng1_seed),
    .num(M_rng1_num)
  );
  
  wire [16-1:0] M_rng2_num;
  reg [1-1:0] M_rng2_clk;
  reg [1-1:0] M_rng2_rst;
  reg [1-1:0] M_rng2_next;
  reg [32-1:0] M_rng2_seed;
  random_problem_9 rng2 (
    .clk(M_rng2_clk),
    .rst(M_rng2_rst),
    .next(M_rng2_next),
    .seed(M_rng2_seed),
    .num(M_rng2_num)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_11 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edgeAdd1_out;
  reg [1-1:0] M_edgeAdd1_in;
  edge_detector_12 edgeAdd1 (
    .clk(clk),
    .in(M_edgeAdd1_in),
    .out(M_edgeAdd1_out)
  );
  wire [1-1:0] M_condAdd1_out;
  reg [1-1:0] M_condAdd1_in;
  button_conditioner_13 condAdd1 (
    .clk(clk),
    .in(M_condAdd1_in),
    .out(M_condAdd1_out)
  );
  wire [1-1:0] M_edgeSub1_out;
  reg [1-1:0] M_edgeSub1_in;
  edge_detector_12 edgeSub1 (
    .clk(clk),
    .in(M_edgeSub1_in),
    .out(M_edgeSub1_out)
  );
  wire [1-1:0] M_condSub1_out;
  reg [1-1:0] M_condSub1_in;
  button_conditioner_13 condSub1 (
    .clk(clk),
    .in(M_condSub1_in),
    .out(M_condSub1_out)
  );
  wire [1-1:0] M_edgeMul1_out;
  reg [1-1:0] M_edgeMul1_in;
  edge_detector_12 edgeMul1 (
    .clk(clk),
    .in(M_edgeMul1_in),
    .out(M_edgeMul1_out)
  );
  wire [1-1:0] M_condMul1_out;
  reg [1-1:0] M_condMul1_in;
  button_conditioner_13 condMul1 (
    .clk(clk),
    .in(M_condMul1_in),
    .out(M_condMul1_out)
  );
  wire [1-1:0] M_edgeClr1_out;
  reg [1-1:0] M_edgeClr1_in;
  edge_detector_12 edgeClr1 (
    .clk(clk),
    .in(M_edgeClr1_in),
    .out(M_edgeClr1_out)
  );
  wire [1-1:0] M_condClr1_out;
  reg [1-1:0] M_condClr1_in;
  button_conditioner_13 condClr1 (
    .clk(clk),
    .in(M_condClr1_in),
    .out(M_condClr1_out)
  );
  wire [1-1:0] M_edgeAdd2_out;
  reg [1-1:0] M_edgeAdd2_in;
  edge_detector_12 edgeAdd2 (
    .clk(clk),
    .in(M_edgeAdd2_in),
    .out(M_edgeAdd2_out)
  );
  wire [1-1:0] M_condAdd2_out;
  reg [1-1:0] M_condAdd2_in;
  button_conditioner_13 condAdd2 (
    .clk(clk),
    .in(M_condAdd2_in),
    .out(M_condAdd2_out)
  );
  wire [1-1:0] M_edgeSub2_out;
  reg [1-1:0] M_edgeSub2_in;
  edge_detector_12 edgeSub2 (
    .clk(clk),
    .in(M_edgeSub2_in),
    .out(M_edgeSub2_out)
  );
  wire [1-1:0] M_condSub2_out;
  reg [1-1:0] M_condSub2_in;
  button_conditioner_13 condSub2 (
    .clk(clk),
    .in(M_condSub2_in),
    .out(M_condSub2_out)
  );
  wire [1-1:0] M_edgeMul2_out;
  reg [1-1:0] M_edgeMul2_in;
  edge_detector_12 edgeMul2 (
    .clk(clk),
    .in(M_edgeMul2_in),
    .out(M_edgeMul2_out)
  );
  wire [1-1:0] M_condMul2_out;
  reg [1-1:0] M_condMul2_in;
  button_conditioner_13 condMul2 (
    .clk(clk),
    .in(M_condMul2_in),
    .out(M_condMul2_out)
  );
  wire [1-1:0] M_edgeClr2_out;
  reg [1-1:0] M_edgeClr2_in;
  edge_detector_12 edgeClr2 (
    .clk(clk),
    .in(M_edgeClr2_in),
    .out(M_edgeClr2_out)
  );
  wire [1-1:0] M_condClr2_out;
  reg [1-1:0] M_condClr2_in;
  button_conditioner_13 condClr2 (
    .clk(clk),
    .in(M_condClr2_in),
    .out(M_condClr2_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_rng1_clk = clk;
    M_rng1_rst = rst;
    M_rng1_seed = 1'h0;
    M_rng2_seed = 1'h1;
    M_rng2_clk = clk;
    M_rng2_rst = rst;
    M_rng2_next = M_ctl2_rngout;
    M_rng1_next = M_ctl1_rngout;
    M_condAdd1_in = add1;
    M_edgeAdd1_in = M_condAdd1_out;
    M_condSub1_in = sub1;
    M_edgeSub1_in = M_condSub1_out;
    M_condMul1_in = mul1;
    M_edgeMul1_in = M_condMul1_out;
    M_condClr1_in = clr1;
    M_edgeClr1_in = M_condClr1_out;
    M_condAdd2_in = add2;
    M_edgeAdd2_in = M_condAdd2_out;
    M_condSub2_in = sub2;
    M_edgeSub2_in = M_condSub2_out;
    M_condMul2_in = mul2;
    M_edgeMul2_in = M_condMul2_out;
    M_condClr2_in = clr2;
    M_edgeClr2_in = M_condClr2_out;
    M_ctl1_clk = clk;
    M_ctl1_rst = rst;
    M_ctl1_startbt = start;
    M_ctl1_addbt = M_edgeAdd1_out;
    M_ctl1_subbt = M_edgeSub1_out;
    M_ctl1_mulbt = M_edgeMul1_out;
    M_ctl1_clrbt = M_edgeClr1_out;
    M_ctl1_fromreg = M_reg_fsmport1;
    M_ctl1_rngin = M_rng1_num;
    M_ctl2_clk = clk;
    M_ctl2_rst = rst;
    M_ctl2_startbt = start;
    M_ctl2_addbt = M_edgeAdd2_out;
    M_ctl2_subbt = M_edgeSub2_out;
    M_ctl2_mulbt = M_edgeMul2_out;
    M_ctl2_clrbt = M_edgeClr2_out;
    M_ctl2_fromreg = M_reg_fsmport2;
    M_ctl2_rngin = M_rng2_num;
    M_alu1_alufn = M_ctl1_alufn;
    M_alu1_a = M_reg_a1;
    
    case (M_ctl1_bsel)
      3'h0: begin
        M_alu1_b = 1'h0;
      end
      3'h1: begin
        M_alu1_b = 1'h1;
      end
      3'h2: begin
        M_alu1_b = 2'h2;
      end
      3'h3: begin
        M_alu1_b = 2'h3;
      end
      3'h7: begin
        M_alu1_b = M_reg_goalreg;
      end
      default: begin
        M_alu1_b = 1'h0;
      end
    endcase
    M_alu2_alufn = M_ctl2_alufn;
    M_alu2_a = M_reg_a2;
    
    case (M_ctl2_bsel)
      3'h0: begin
        M_alu2_b = 1'h0;
      end
      3'h1: begin
        M_alu2_b = 1'h1;
      end
      3'h2: begin
        M_alu2_b = 2'h2;
      end
      3'h3: begin
        M_alu2_b = 2'h3;
      end
      3'h7: begin
        M_alu2_b = M_reg_goalreg;
      end
      default: begin
        M_alu2_b = 1'h0;
      end
    endcase
    M_reg_clk = clk;
    M_reg_rst = rst;
    M_reg_wa1 = M_ctl1_wa;
    M_reg_asel1 = M_ctl1_asel;
    M_reg_we1 = M_ctl1_we;
    M_reg_ra1 = M_ctl1_ra;
    M_reg_fsm1 = M_ctl1_toreg;
    M_reg_alu1 = M_alu1_s;
    M_reg_wa2 = M_ctl2_wa;
    M_reg_asel2 = M_ctl2_asel;
    M_reg_we2 = M_ctl2_we;
    M_reg_ra2 = M_ctl2_ra;
    M_reg_alu2 = M_alu2_s;
    M_reg_fsm2 = M_ctl2_toreg;
    M_reg_reset = M_ctl1_reset;
    M_seven_seg11_char = M_reg_p1num;
    M_seven_seg22_char = M_reg_p2num;
    M_seven_seg_p_char = M_reg_goalreg;
    goaldisplay[0+6-:7] = ~M_seven_seg_p_segs1;
    goaldisplay[7+6-:7] = ~M_seven_seg_p_segs2;
    p1display[7+6-:7] = M_seven_seg11_segs1;
    p1display[0+6-:7] = M_seven_seg11_segs2;
    p2display[7+6-:7] = M_seven_seg22_segs2;
    p2display[0+6-:7] = M_seven_seg22_segs1;
    lane1a[0+4-:5] = M_reg_lane1p1[0+4-:5];
    lane2a[0+4-:5] = M_reg_lane2p1[0+4-:5];
    lane3a[0+4-:5] = M_reg_lane3p1[0+4-:5];
    lane1b = M_reg_lane1p2[0+4-:5];
    lane2b = M_reg_lane2p2[0+4-:5];
    lane3b = M_reg_lane3p2[0+4-:5];
  end
endmodule

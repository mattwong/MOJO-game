/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfiles_8 (
    input clk,
    input rst,
    input [2:0] asel1,
    input [2:0] asel2,
    input [2:0] wa1,
    input [2:0] wa2,
    input we1,
    input we2,
    input [2:0] ra1,
    input [2:0] ra2,
    input reset,
    input [15:0] fsm1,
    input [15:0] fsm2,
    input [15:0] alu1,
    input [15:0] alu2,
    output reg [15:0] a1,
    output reg [15:0] a2,
    output reg [15:0] fsmport1,
    output reg [15:0] fsmport2,
    output reg [15:0] tob1,
    output reg [15:0] tob2,
    output reg [15:0] goalreg,
    output reg [15:0] lane1p1,
    output reg [15:0] lane2p1,
    output reg [15:0] lane3p1,
    output reg [15:0] lane1p2,
    output reg [15:0] lane2p2,
    output reg [15:0] lane3p2,
    output reg [15:0] p1num,
    output reg [15:0] p2num,
    output reg [15:0] lanereg
  );
  
  
  
  reg [15:0] M_r1_d, M_r1_q = 1'h0;
  reg [15:0] M_r2_d, M_r2_q = 1'h0;
  reg [15:0] M_r3_d, M_r3_q = 1'h0;
  reg [15:0] M_r4_d, M_r4_q = 1'h0;
  reg [15:0] M_r5_d, M_r5_q = 1'h0;
  reg [15:0] M_r6_d, M_r6_q = 1'h0;
  reg [15:0] M_r7_d, M_r7_q = 1'h0;
  reg [15:0] M_r8_d, M_r8_q = 1'h0;
  reg [15:0] M_r9_d, M_r9_q = 1'h0;
  reg [15:0] M_r10_d, M_r10_q = 1'h0;
  reg [15:0] M_r11_d, M_r11_q = 1'h0;
  reg [15:0] M_r12_d, M_r12_q = 1'h0;
  reg [0:0] M_x_d, M_x_q = 1'h0;
  
  always @* begin
    M_r12_d = M_r12_q;
    M_r11_d = M_r11_q;
    M_r10_d = M_r10_q;
    M_r6_d = M_r6_q;
    M_r7_d = M_r7_q;
    M_r8_d = M_r8_q;
    M_r9_d = M_r9_q;
    M_r1_d = M_r1_q;
    M_r2_d = M_r2_q;
    M_r3_d = M_r3_q;
    M_r4_d = M_r4_q;
    M_r5_d = M_r5_q;
    M_x_d = M_x_q;
    
    if (M_x_q == 1'h0) begin
      M_r4_d = 1'h1;
      M_r5_d = 1'h1;
      M_r6_d = 1'h1;
      M_r7_d = 1'h1;
      M_r8_d = 1'h1;
      M_r9_d = 1'h1;
      M_x_d = 1'h1;
    end
    if (reset == 1'h1) begin
      M_x_d = 1'h0;
    end
    if (we1) begin
      
      case (wa1)
        3'h0: begin
          M_r1_d = alu1;
        end
        3'h1: begin
          M_r3_d = fsm1;
        end
        3'h2: begin
          M_r4_d = alu1;
        end
        3'h3: begin
          M_r5_d = alu1;
        end
        3'h4: begin
          M_r6_d = alu1;
        end
        3'h6: begin
          M_r10_d = alu1;
        end
        3'h5: begin
          M_r11_d = alu1;
        end
      endcase
    end
    if (we2) begin
      
      case (wa2)
        3'h0: begin
          M_r2_d = alu2;
        end
        3'h1: begin
          M_r3_d = fsm2;
        end
        3'h2: begin
          M_r7_d = alu2;
        end
        3'h3: begin
          M_r8_d = alu2;
        end
        3'h4: begin
          M_r9_d = alu2;
        end
        3'h6: begin
          M_r10_d = alu2;
        end
        3'h5: begin
          M_r12_d = alu2;
        end
      endcase
    end
    
    case (asel1)
      3'h0: begin
        a1 = M_r1_q;
      end
      3'h2: begin
        a1 = M_r4_q;
      end
      3'h3: begin
        a1 = M_r5_q;
      end
      3'h4: begin
        a1 = M_r6_q;
      end
      3'h6: begin
        a1 = M_r10_q;
      end
      default: begin
        a1 = 1'h0;
      end
    endcase
    
    case (asel2)
      3'h0: begin
        a2 = M_r2_q;
      end
      3'h2: begin
        a2 = M_r7_q;
      end
      3'h3: begin
        a2 = M_r8_q;
      end
      3'h4: begin
        a2 = M_r9_q;
      end
      3'h6: begin
        a2 = M_r10_q;
      end
      default: begin
        a2 = 1'h0;
      end
    endcase
    
    case (ra1)
      3'h5: begin
        fsmport1 = M_r11_q;
      end
      3'h6: begin
        fsmport1 = M_r10_q;
      end
      3'h2: begin
        fsmport1 = M_r4_q;
      end
      3'h3: begin
        fsmport1 = M_r5_q;
      end
      3'h4: begin
        fsmport1 = M_r6_q;
      end
      default: begin
        fsmport1 = 1'h0;
      end
    endcase
    
    case (ra2)
      3'h5: begin
        fsmport2 = M_r12_q;
      end
      3'h6: begin
        fsmport2 = M_r10_q;
      end
      3'h2: begin
        fsmport2 = M_r7_q;
      end
      3'h3: begin
        fsmport2 = M_r8_q;
      end
      3'h4: begin
        fsmport2 = M_r9_q;
      end
      default: begin
        fsmport2 = 1'h0;
      end
    endcase
    goalreg = M_r3_q;
    p1num = M_r1_q;
    p2num = M_r2_q;
    lane1p1 = M_r4_q;
    lane2p1 = M_r5_q;
    lane3p1 = M_r6_q;
    lane1p2 = M_r7_q;
    lane2p2 = M_r8_q;
    lane3p2 = M_r9_q;
    tob1 = M_r11_q;
    tob2 = M_r12_q;
    lanereg = M_r10_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_r1_q <= 1'h0;
      M_r2_q <= 1'h0;
      M_r3_q <= 1'h0;
      M_r4_q <= 1'h0;
      M_r5_q <= 1'h0;
      M_r6_q <= 1'h0;
      M_r7_q <= 1'h0;
      M_r8_q <= 1'h0;
      M_r9_q <= 1'h0;
      M_r10_q <= 1'h0;
      M_r11_q <= 1'h0;
      M_r12_q <= 1'h0;
      M_x_q <= 1'h0;
    end else begin
      M_r1_q <= M_r1_d;
      M_r2_q <= M_r2_d;
      M_r3_q <= M_r3_d;
      M_r4_q <= M_r4_d;
      M_r5_q <= M_r5_d;
      M_r6_q <= M_r6_d;
      M_r7_q <= M_r7_d;
      M_r8_q <= M_r8_d;
      M_r9_q <= M_r9_d;
      M_r10_q <= M_r10_d;
      M_r11_q <= M_r11_d;
      M_r12_q <= M_r12_d;
      M_x_q <= M_x_d;
    end
  end
  
endmodule
